设计线程安全的类

设计程序安全类的过程应该包括下面3个基本要素：
 1、确定对象状态由哪些变量构成的
 2、确定限制状态变量的不变约束
 3、制定一个管理并发访问对象状态的策略
 
 在不变约束涉及多个变量时，任何一个操作再访问相关变量期间，线程必须占有保护这些变量的锁。
 
 不理解对象的不变约束和后验条件，就不能保证线程的安全性。要约束状态变量的有效值或者状态转换，就需要原子性和封装性。
 
 若一个操作存在基于状态的先验条件，则把它称之为状态依赖的。例如，无法从一个空队列中移除一个条目；在删除元素前，队列必须处于非空状态。
 
即使一个对象不是线程安全的，仍然有很多技术可以让它安全的用于多线程程序；例如
 1、确保它只被单一的线程访问
 2、也可以确保所有的访问都正确的被锁保护。
 
将数据封装在对象内部，把对数据的访问限制在对象的方法上，更易确保线程在访问数据时总能获得正确的锁。
限制性使构造线程安全的类变得更容易。因为类的状态被限制后，分析它的线程安全性时，就不必检查完整的程序。

线程限制原则的直接推论之一是Java监视器模式。遵循Java监视器模式的对象封装了所有的可变状态，并由对象自己的内部锁保护。

如果一个类由多个彼此独立的线程安全的状态变量组成，并且类的操作不包含任何无效的状态转换时，可以将线程安全委托给这些状态变量。

