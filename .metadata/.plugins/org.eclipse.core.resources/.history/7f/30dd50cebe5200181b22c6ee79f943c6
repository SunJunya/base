package com.heima.net.udp;

import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Color;
import java.awt.Event;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Panel;
import java.awt.TextArea;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class GUIChat extends Frame{
	private TextField tf;
	private TextArea viewText;
	private TextArea sendText;
	private Button send;
	private Button log;
	private Button clear;
	private Button shake;
	private DatagramSocket socket;
	private BufferedWriter bw;

	/*
	 * GUI聊天
	 * */
	
	public GUIChat(){
		init();//创建设置窗口
		southPanel();
		centerPanel();
		Event();
	}

	private void Event() {
		this.addWindowListener(new WindowAdapter() {
			 public void windowClosing(WindowEvent e) {
				 
				 try {
					socket.close();
					 bw.close();
				} catch (IOException e1) {
					
					e1.printStackTrace();
				}
				 
				 System.exit(0);
			 }
		});
		
		
		//动作监听
		send.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					send();
				} catch (IOException e1) {
					
					e1.printStackTrace();
				}
			}

			
		});
		
		//记录监听
		log.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					logFile();
				} catch (IOException e1) {
					
					e1.printStackTrace();
				}
			}

			private void logFile() throws IOException {
				bw.flush();
				FileInputStream fis = new FileInputStream("config.txt");
				ByteArrayOutputStream baos = new ByteArrayOutputStream();//在内存中创建缓冲区
				int len=0;
				byte[] arr = new byte[8192];
				while((len=fis.read(arr)) != -1){
					baos.write(arr,0,len);
				}
				
				String str =baos.toString();
				viewText.setText(str);
				fis.close();
			}
		});
		
		//清屏监听
		clear.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				viewText.setText("");
			}
		});
		
		//震动监听
		shake.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				shake();
			}

			
		});
	}
	
	private void shake() {
		int x = this.getLocation().x;
		int y = this.getLocation().y;
		
		this.setLocation(x+20, y+20);
		this.setLocation(x+20, y-20);
		this.setLocation(x-20, y+20);
		this.setLocation(x-20, y-20);
		this.setLocation(x, y);
	}
	
	private void send() throws IOException {
		String messge = sendText.getText();  //获取发送区域的内容；
		String ip = tf.getText() ; // 获取ip地址
		
		DatagramPacket packet = new DatagramPacket(messge.getBytes(), messge.getBytes().length, InetAddress.getByName(ip), 6666);
		socket.send(packet);
		
		String time = getCurrentTime();
		String str = time+" 我对  "+ip+" 说:"+"\r\n"+messge+"\r\n";
		viewText.append(str);
		bw.write(str);
		sendText.setText("");
	}
	
	private String getCurrentTime() {
		Date d = new Date();  //创建当前日期对象
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日 HH:mm:ss");
		
		return sdf.format(d);  //将时间格式化
	}

	private void centerPanel() {
		Panel center = new Panel();
		sendText = new TextArea(5,1);
		viewText = new TextArea();
		center.setLayout(new BorderLayout());
		center.add(sendText, BorderLayout.SOUTH);
		center.add(viewText, BorderLayout.CENTER);
		viewText.setEditable(false);  		 //viewText设置不可以编辑
		viewText.setBackground(Color.WHITE); //设置背景颜色
		sendText.setFont(new Font("test", Font.PLAIN, 20));
		viewText.setFont(new Font("test", Font.PLAIN, 20));
		this.add(center);
	}

	private void southPanel() {
		Panel south = new Panel();   //创建下面的panel
		tf = new TextField(15);
		tf.setText("127.0.0.1");
		send = new Button("发送");
		log = new Button("记录");
		clear = new Button("清屏");
		shake = new Button("震动");
		south.add(tf);
		south.add(send);
		south.add(log);
		south.add(clear);
		south.add(shake);
		this.add(south, BorderLayout.SOUTH);
	}

	private void init() {
		//创建窗口
		this.setLocation(500,50);  //设置位置
		this.setSize(400, 600);    //设置大小
		this.setVisible(true);     //设置显示
		new Recive().start();
		try {
			socket = new DatagramSocket();
			bw = new BufferedWriter(new FileWriter("config.txt",true));
		} catch (Exception e) {
			
			e.printStackTrace();
		}
	}
	
	class Recive extends Thread{ //接收和发送需要同时执行，所以需要多线程
		public void run(){
			try {
				DatagramSocket socket = new DatagramSocket(6666);
				DatagramPacket packet = new DatagramPacket(new byte[8192], 8192);
				while(true){
					socket.receive(packet);
					byte[] arr = packet.getData();
					int len = packet.getLength();
					String remess = new String(arr, 0, len);
					
					String ip =packet.getAddress().getHostAddress();
					String time = getCurrentTime();
					String str = time+"  "+ip+" 对我说:"+"\r\n"+remess+"\r\n";
					viewText.append(str);
					bw.write(str);
				}
				
			} catch (IOException e) {
				
				e.printStackTrace();
			}
			
			
		}
	}

	
	
	
	
	
	
	public static void main(String[] args) {
		new GUIChat();
	}
	
	
}















