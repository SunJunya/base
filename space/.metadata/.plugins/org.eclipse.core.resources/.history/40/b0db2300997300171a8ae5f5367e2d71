package com.txt;

import java.io.RandomAccessFile;
import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.sql.Statement;

import javax.swing.text.DefaultEditorKit.InsertBreakAction;

public class Phenotype_annotation {
	private static final String path = "E://白原科技//辅助诊断系统-后台数据//phenotype_annotation.txt";
	public static final String openFileStyle = "r";
	public static final String fieldLimitChar = "\t";
	public static final int fieldAllCount = 2;
	
	private int count;
	
	
	private  String hp_id;
	private  String omim_id;
	

	public void loadFile(){
		try {
	           RandomAccessFile raf = new RandomAccessFile(path, openFileStyle);
	           String line_record = raf.readLine();
	           while (line_record != null) {
	              // 解析每一条记录
	              parseRecord(line_record);
	               line_record = raf.readLine();
	           }
	           System.out.println("共有合法的记录" + count + "条");
	       } catch (Exception e) {
	           e.printStackTrace();
	       }
	}

	private void parseRecord(String line_record) throws Exception{
		// TODO Auto-generated method stub
		String[] fields = line_record.split(fieldLimitChar);
		if(fields.length>=fieldAllCount ){
			
			hp_id=transtr(fields[4]);
			omim_id=transtr(fields[5]);
			
			System.out.println(hp_id+" "+omim_id);
			
			insertDB(hp_id,omim_id);
			count++;
			System.out.println(count);
			
		}
	}

	private void insertDB(String hp_id2, String omim_id2) {
		// TODO Auto-generated method stub
		Connection con=null;
    	Statement stm=null;
    	boolean flag=false;
    	DBConnect db=new DBConnect();
    	String sql="insert into phenotype_annotation values('"+hp_id2+"','"+omim_id2+"')";
    	
    	try {
    		con=db.getCon();
			stm=con.createStatement();
			int i=stm.executeUpdate(sql);
			if(i>0) 
				flag=true;
			    System.out.println("insert successful");
		} catch (Exception e) {
			// TODO: handle exception
			flag=false;
			e.printStackTrace();
			System.out.println("insert fail");
		}finally {
			db.close(null, stm, con);
		}
	}

	private String transtr(String oldstr) {
		// TODO Auto-generated method stub
		String newstr = "";
	    try {
	      newstr = new String(oldstr.getBytes("ISO-8859-1"), "GBK");
	     } catch (UnsupportedEncodingException e) {
	     e.printStackTrace();
	     }
	     return newstr;
	}
	
	public static void main (String arg[]) {
		try{
			Phenotype_annotation gather=new Phenotype_annotation();
			gather.loadFile();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
}
